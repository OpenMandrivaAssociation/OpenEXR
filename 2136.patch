From a63b39e119081012156be732c112ada820c87962 Mon Sep 17 00:00:00 2001
From: Cary Phillips <cary@ilm.com>
Date: Fri, 3 Oct 2025 16:30:18 -0700
Subject: [PATCH 1/2] Fix openjph include directory

This fixes the openjph includes to look in the openjph folder:

This worked in earlier releases because OpenJPH 0.22 and before
appended openjph to the INTERFACE_INCLUDE_DIRECTORIES in its exported
cmake config, but this is fixed in OpenJPH 0.23.

Rather than complicate the OpenEXR source files, this fixes the
problem in the cmake config for the earlier versions by manually
stripping the "openjph" from the include directory setting.

However, when building OpenJPH via FetchContent, the headers reside in
src/core/common directory in the OpenJPH source tree, not in an
openjph folder, so this creates a symlink in the openjph source folder
in this case.  Note that the longer (hopefully not too much longer)
term plan is to vendor in the openjph source and dispense with the
FetchContent altogether, so this code can be removed then.

I've tested this with OpenJPH 0.22.0, 0.23.1, and 0.24.1 in both the
case of fetch/internal build and building against an external
installation.

Signed-off-by: Cary Phillips <cary@ilm.com>
---
 cmake/OpenEXRSetup.cmake            | 37 ++++++++++++++++++++++++++++-
 src/lib/OpenEXRCore/internal_ht.cpp | 12 +++++-----
 2 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/cmake/OpenEXRSetup.cmake b/cmake/OpenEXRSetup.cmake
index 4c99f3566..68037a1a3 100644
--- a/cmake/OpenEXRSetup.cmake
+++ b/cmake/OpenEXRSetup.cmake
@@ -265,6 +265,7 @@ if (NOT OPENEXR_FORCE_INTERNAL_OPENJPH)
     if(openjph_VERSION VERSION_LESS "0.21.0")
         message(FATAL_ERROR "OpenJPH >= 0.21.0 required, but found ${openjph_VERSION}")
     endif()
+
     message(STATUS "Using OpenJPH ${openjph_VERSION} from ${openjph_DIR}")
     set(EXR_OPENJPH_LIB openjph)
   else()
@@ -308,7 +309,24 @@ if(NOT EXR_OPENJPH_LIB)
     POSITION_INDEPENDENT_CODE ON
     RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
   )
-  include_directories("${openjph_SOURCE_DIR}/src/core/common")
+
+  # OpenEXR expects OpenJPH headers to live in an openjph folder,
+  # so OpenEXR's include looks like:
+  #   #include <openjph/openjph_arch.h>
+  # However, when building OpenJPH via FetchContent, the headers
+  # reside in src/core/common directory in the OpenJPH source tree.
+  # Create a symlink called "openjph" that points to "common", so the
+  # OpenEXR includes see the files they expect.
+  # Then add that as the include directory.
+  #
+  # NOTE: This can go away when we vendor in the OpenJPH code and
+  # retire the FetchContent altogether.
+  file(CREATE_LINK
+    "${openjph_SOURCE_DIR}/src/core/common"
+    "${openjph_SOURCE_DIR}/src/core/openjph"
+    SYMBOLIC
+  )
+  include_directories("${openjph_SOURCE_DIR}/src/core")
 
   # extract the openjph version variables from ojph_version.h
   set(openjph_version "${openjph_SOURCE_DIR}/src/core/common/ojph_version.h")
@@ -328,6 +346,23 @@ if (NOT EXR_OPENJPH_LIB)
   message(ERROR "Failed to find OpenJPH")
 endif()
 
+if (openjph_VERSION VERSION_LESS "0.23")
+  # OpenJPH 0.22 and before incorrectly appends "openjph" to INTERFACE_INCLUDE_DIRECTORIES
+  # so OpenEXR's "#include <openjph/ojph_arch.h>" does not work.
+  # Strip the "openjph" from the setting in this case. This allows the
+  # #include statements in OpenEXRCore/internal_ht.cpp  to work properly for all openjph versions.
+  get_target_property(OPENJPH_INCLUDE_DIR openjph INTERFACE_INCLUDE_DIRECTORIES)
+  if (NOT OPENJPH_INCLUDE_DIR)
+    message(FATAL_ERROR "failed to set openjph header directory, version ${openjph_VERSION}")
+  endif()
+  string(REGEX REPLACE "/openjph/?$" "" OPENJPH_PARENT_INCLUDE_DIR "${OPENJPH_INCLUDE_DIR}")
+  set_target_properties(openjph PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES "${OPENJPH_PARENT_INCLUDE_DIR}"
+  )
+  unset(OPENJPH_INCLUDE_DIR)
+  unset(OPENJPH_PARENT_INCLUDE_DIR)
+endif()
+
 set(EXR_OPENJPH_PKGCONFIG_REQUIRES "openjph >= 0.21.0")
 
 #######################################
diff --git a/src/lib/OpenEXRCore/internal_ht.cpp b/src/lib/OpenEXRCore/internal_ht.cpp
index 14d1940ff..c4385ef5c 100644
--- a/src/lib/OpenEXRCore/internal_ht.cpp
+++ b/src/lib/OpenEXRCore/internal_ht.cpp
@@ -7,12 +7,12 @@
 #include <string>
 #include <fstream>
 
-#include <ojph_arch.h>
-#include <ojph_file.h>
-#include <ojph_params.h>
-#include <ojph_mem.h>
-#include <ojph_codestream.h>
-#include <ojph_message.h>
+#include <openjph/ojph_arch.h>
+#include <openjph/ojph_file.h>
+#include <openjph/ojph_params.h>
+#include <openjph/ojph_mem.h>
+#include <openjph/ojph_codestream.h>
+#include <openjph/ojph_message.h>
 
 #include "openexr_decode.h"
 #include "openexr_encode.h"

From 9e6594828d37d264842ba3d1a9297dce376e839e Mon Sep 17 00:00:00 2001
From: Cary Phillips <cary@ilm.com>
Date: Sat, 4 Oct 2025 17:28:05 -0700
Subject: [PATCH 2/2] bazel: bump openjph to 0.24.1

Signed-off-by: Cary Phillips <cary@ilm.com>
---
 MODULE.bazel | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/MODULE.bazel b/MODULE.bazel
index 055283a49..f6f90e399 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -9,6 +9,6 @@ module(
 bazel_dep(name = "bazel_skylib", version = "1.8.2")
 bazel_dep(name = "imath", version = "3.2.1")
 bazel_dep(name = "libdeflate", version = "1.24")
-bazel_dep(name = "openjph", version = "0.22.0")
+bazel_dep(name = "openjph", version = "0.24.1")
 bazel_dep(name = "platforms", version = "1.0.0")
 bazel_dep(name = "rules_cc", version = "0.2.9")
